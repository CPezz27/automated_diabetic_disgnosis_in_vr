C:\Users\divic\AppData\Local\Programs\Python\Python39\python.exe "C:\Users\divic\Desktop\La Cartella\Informatica\automated_diabetic_diagnosis_in_vr\automated_diabetic_disgnosis_in_vr\lesion_models.py"
Before one-hot encoding: torch.Size([54, 128, 128])
After one-hot encoding: torch.Size([54, 128, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([54, 128, 128])
After one-hot encoding: torch.Size([54, 128, 128, 1])
After permute and squeeze: tensor(1.) tensor(1.)
C:\Users\divic\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\optim\lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.
  warnings.warn(
C:\Users\divic\Desktop\La Cartella\Informatica\automated_diabetic_diagnosis_in_vr\automated_diabetic_disgnosis_in_vr\lesion_models.py:170: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  mask = torch.tensor(mask, dtype=torch.float32).permute(2, 0, 1)
C:\Users\divic\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py:1736: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  return self._call_impl(*args, **kwargs)
C:\Users\divic\Desktop\La Cartella\Informatica\automated_diabetic_diagnosis_in_vr\automated_diabetic_disgnosis_in_vr\lesion_models.py:20: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  masks_tensor = torch.tensor(masks, dtype=torch.int64)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([3, 128, 1, 128])
After one-hot encoding: torch.Size([3, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Epoch [1/5], Lesion Train Loss: 0.2242, Lesion Val Loss: 0.2339, Lesion Val Dice: 0.2500, Disc Train Loss: 0.1971, Disc Val Loss: 0.4179, Disc Val Dice: 0.2858
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([3, 128, 1, 128])
After one-hot encoding: torch.Size([3, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Epoch [2/5], Lesion Train Loss: 0.2113, Lesion Val Loss: 0.2327, Lesion Val Dice: 0.2697, Disc Train Loss: 0.1873, Disc Val Loss: 0.3889, Disc Val Dice: 0.9347
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([3, 128, 1, 128])
After one-hot encoding: torch.Size([3, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Epoch [3/5], Lesion Train Loss: 0.2062, Lesion Val Loss: 0.2308, Lesion Val Dice: 0.3030, Disc Train Loss: 0.1824, Disc Val Loss: 0.3416, Disc Val Dice: 0.9520
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([3, 128, 1, 128])
After one-hot encoding: torch.Size([3, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Epoch [4/5], Lesion Train Loss: 0.2032, Lesion Val Loss: 0.2196, Lesion Val Dice: 0.5197, Disc Train Loss: 0.1798, Disc Val Loss: 0.2337, Disc Val Dice: 0.9785
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([8, 128, 1, 128])
After one-hot encoding: torch.Size([8, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Before one-hot encoding: torch.Size([3, 128, 1, 128])
After one-hot encoding: torch.Size([3, 128, 1, 128, 4])
After permute and squeeze: tensor(0.) tensor(1.)
Epoch [5/5], Lesion Train Loss: 0.2014, Lesion Val Loss: 0.2078, Lesion Val Dice: 0.7911, Disc Train Loss: 0.1783, Disc Val Loss: 0.1152, Disc Val Dice: 0.9881

Process finished with exit code 0
